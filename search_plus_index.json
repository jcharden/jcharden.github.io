{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction Copyright © 程潇 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-09-25 14:12:28 "},"Chapter1/":{"url":"Chapter1/","title":"Chapter1:VulDetection","keywords":"","body":"Chapter1:VulDetection Vulnerability Detection paper summary slicing tech survey of program analysis with dl/ml Copyright © 程潇 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-09-25 11:15:26 "},"Chapter1/Slicing.html":{"url":"Chapter1/Slicing.html","title":"Section1:Slicing","keywords":"","body":"Section1:Slicing The defination of program slicing first appears in the paper \"Program Slicing\" on IEEE TRANSACTIONS ON SOFTWARE ENGINEERING, VOL. SE-10, NO. 4, JULY 1984 by MARK WEISER. Program slicing is a method for automatically decomposing programs by analyzing their data flow and control flow. Starting from a subset of a program's behavior, slicing reduces that program to a minimal form which still produces that behavior. The reduced program, called a \"slice,\" is an independent program guaranteed to represent faithfully the original program within the domain of the specified subset of behavior. Some properties of slices are presented. In particular, finding statement-minimal slices is in general unsolvable, but using data flow analysis is sufficient to find approximate slices. Potential applications include automatic slicing tools for debuggng and parallel processing of slices. Copyright © 程潇 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-09-25 13:34:28 "},"Chapter1/Slicing_SNS.html":{"url":"Chapter1/Slicing_SNS.html","title":"STRUCTURED NEURAL SUMMARIZATION","keywords":"","body":"STRUCTURED NEURAL SUMMARIZATION Abstract 解决了将富含冗余信息的长文本转化为更精确的短文本抽象，该文章将weakly structured data即text转化为highly structured data即graph，这里保留了文本的上下文关系以及token的long-distance关系，然后结合图神经网络进行学习。 Note 关键在于如何将text转成graph，这里用一张图来说明： 文章用来CoreNLP来得到entity，有三种连接关系，next表示顺序关系，in表示从属关系，ref表示引用关系。 Thought 可以把每一个statement再细分成token，然后用AST或者其他方式组织这些token，这样可以最大程度避免丢失由于长文本导致的statement中token信息丢失的问题，但是得到的图会更大，以及如何用AST去表示每条statement是一个待解决问题。 Copyright © 程潇 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-09-25 14:36:18 "},"Chapter1/Slicing_CV.html":{"url":"Chapter1/Slicing_CV.html","title":"Code Vectors","keywords":"","body":"Code Vectors: Understanding Programs Through Embedded Abstracted Symbolic Traces Abstract 采用abstractions of traces obtained from symbolic execution of a program来表示程序，将这些traces转化为向量，这些向量即代码的特征表示。 Note 关键在于如何抽象以及如何做word embedding 关于如何做抽象： 关于如何做word embedding Thought 提供了一个做slice以及word,statement embedding的思路 做slice可以结合符号执行，embedding可以用抽象表示，这样可以减少token的数量，以及删除冗余信息。 Copyright © 程潇 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-09-25 14:36:05 "},"Chapter1/Slicing_ORBS.html":{"url":"Chapter1/Slicing_ORBS.html","title":"ORBS","keywords":"","body":"ORBS:Language-Independent Program Slicing) Abstract 通过删除特定语句，且删除后对于特定输入，依然能得到原来的结果，不断删除。这是一个动态的slicing，需要testcase输入。 Approach 给了一个slice的定义 Thought 提供了一个slice的思路，通过删除之后而不改变语义的方法。 Copyright © 程潇 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-09-25 14:36:13 "},"Chapter1/Slicing_MOBS.html":{"url":"Chapter1/Slicing_MOBS.html","title":"MOBS","keywords":"","body":"MOBS: Multi-Operator Observation-Based Slicing using Lexical Approximation of Program Dependence Abstract 改进了ORBS，通过文本相似度 Note 通过vsm和lda算法计算和待删除的lines和已经可以确定删除的lines的相似度，如果很相似则删掉。 Thought 可以通过计算相似度的方法来对slice进行一些预处理 Copyright © 程潇 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-09-25 14:36:09 "},"Chapter1/Slicing_APS.html":{"url":"Chapter1/Slicing_APS.html","title":"Abstract Program Slicing","keywords":"","body":"Abstract Program Slicing: an Abstract Interpretation-based approach to Program Slicing Abstract 基于传统的slicing提出了抽象slicing，只考虑data的属性而不是准确的值。 Note Program slicing is used for reducing the size of programs to analyze. Nevertheless, sometimes this reduction is not sufficient for really improving an analysis. Suppose that some variables at some point of execution do not have a desired property (for example, that they are different from 0, or from null); in order to understand where the error occurred, it would be useful to find those statements which affect such a property of these variables. Standard slicing may return too many statements, making it hard for the programmer to realize which one caused the error. Thought 为实现相同功能可能有很多种程序写法，通过抽象可以让程序泛型化，特征表示更精准，可以避免混淆。 Copyright © 程潇 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-09-25 14:35:59 "},"Chapter1/Survey.html":{"url":"Chapter1/Survey.html","title":"Section2:Survey","keywords":"","body":"Section2:Survey Copyright © 程潇 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-09-25 09:54:24 "}}